services:
  # A MySQL database for our auction data
  - type: mysql
    name: auction-db
    plan: free # Use a paid plan for a real production app
    # Render automatically creates a database with the same name as the service.

  # The Flask Web Service
  - type: web
    name: auction-website
    env: python
    plan: free # Use a paid plan for better performance
    
    # Command to install dependencies
    buildCommand: "pip install -r requirements.txt"
    
    # Command to start the production server
    # We use Gunicorn with the eventlet worker for Socket.IO
    startCommand: "gunicorn --worker-class eventlet -w 1 app:app"
    
    # A health check to make sure the app is running
    healthCheckPath: /
    
    # Environment variables for the web service
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.4 # Or your desired Python version
      - key: SECRET_KEY
        generateValue: true # Render will generate a secure secret key for you
      # Render automatically injects database credentials from the service above.
      # We just map them to what our app.py expects.
      - key: DB_HOST
        fromService: { type: mysql, name: auction-db, property: host }
      - key: DB_USER
        fromService: { type: mysql, name: auction-db, property: user }
      - key: DB_PASSWORD
        fromService: { type: mysql, name: auction-db, property: password }
      - key: DB_DATABASE
        fromService: { type: mysql, name: auction-db, property: database }